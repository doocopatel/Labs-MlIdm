#include <iostream>
#include <set>
#include <string>

using namespace std;

bool matchesMask(const string& input, const string& mask) {
    if (input.size() != mask.size()) return false;

    for (size_t i = 0; i < mask.size(); ++i) {
        char m = mask[i];
        char ch = input[i];

        if (m == 'c') {
            if (!isdigit(ch)) return false;
        }
        else if (m == 'i') {
            if (!isdigit(ch) || (ch - '0') % 2 != 0) return false;
        }
        else if (m == 'b') {
            if (!isalpha(ch)) return false;
        }
        else {
            return false;
        }
    }

    return true;
}

int main() {
    int n;
    string elements;
    string mask = "ccib";

    set<string> Array1, Array2;
    set<string> ob, pere, rAB, rBA, simR;

    cout << "Enter size of set 1: ";
    cin >> n;

    cout << "Enter elements of set 1: ";
    for (int i = 0; i < n; i++) {
        cin >> elements;

        if (!matchesMask(elements, mask)) {
            cout << "Element '" << elements << "' does not match mask '" << mask << "'\n";
            --i;
            continue;
        }

        Array1.insert(elements);
    }

    cout << "Enter size of set 2: ";
    cin >> n;

    cout << "Enter elements of set 2: ";
    for (int i = 0; i < n; i++) {
        cin >> elements;

        if (!matchesMask(elements, mask)) {
            cout << "Element '" << elements << "' does not match mask '" << mask << "'\n";
            --i;
            continue;
        }

        Array2.insert(elements);
    }

    for (auto x : Array1) ob.insert(x);
    for (auto x : Array2) ob.insert(x);

    for (auto x : Array1)
        if (Array2.count(x)) pere.insert(x);

    for (auto x : Array1)
        if (!Array2.count(x)) rAB.insert(x);

    for (auto x : Array2)
        if (!Array1.count(x)) rBA.insert(x);

    for (auto x : rAB) simR.insert(x);
    for (auto x : rBA) simR.insert(x);

    cout << "\nOb: ";
    for (auto x : ob) cout << x << " ";

    cout << "\npere: ";
    for (auto x : pere) cout << x << " ";

    cout << "\nArray1 \\ Array2: ";
    for (auto x : rAB) cout << x << " ";

    cout << "\nArray2 \\ Array1: ";
    for (auto x : rBA) cout << x << " ";

    cout << "\nSimR: ";
    for (auto x : simR) cout << x << " ";

    return 0;
}
