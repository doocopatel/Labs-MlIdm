#include <iostream>
#include <vector>

using namespace std;

int main() {
    int n, m;


    cout << "Enter number of rows (n): ";
    cin >> n;

    cout << "Enter number of columns (m): ";
    cin >> m;

    vector<vector<int>> matrix(n, vector<int>(m));  


    cout << "Enter matrix values (only 0 or 1), row by row:\n";
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> matrix[i][j];

            if (matrix[i][j] != 0 && matrix[i][j] != 1) {
                cout << "Invalid input. Only 0 or 1 allowed.\n";
                return 1;
            }
        }
    }


    if (n != m) {
        cout << "\nMatrix is not square (n â‰  m), so relation properties cannot be fully checked.\n";
        return 0;
    }


    bool reflexive = true;
    for (int i = 0; i < n; i++) {
        if (matrix[i][i] != 1) {
            reflexive = false;
            break;
        }
    }


    bool sym = true;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (matrix[i][j] != matrix[j][i]) {
                sym = false;
                break;
            }
        }
    }


    bool KosSym = true;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i != j && matrix[i][j] == 1 && matrix[j][i] == 1) {
                KosSym = false;
                break;
            }
        }
    }


    bool transitive = true;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (matrix[i][j]) {
                for (int k = 0; k < n; k++) {
                    if (matrix[j][k] && !matrix[i][k]) {
                        transitive = false;
                        break;
                    }
                }
            }
        }
    }


    cout << "\nProperties of the relation:\n";
    cout << "Reflexive: " << (reflexive ? "Y" : "N") << endl;
    cout << "Sym: " << (sym ? "Y" : "N") << endl;
    cout << "KosSym: " << (KosSym ? "Y" : "N") << endl;
    cout << "Transitive: " << (transitive ? "Y" : "N") << endl;

    return 0;
}
